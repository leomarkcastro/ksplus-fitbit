# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  lastName: String
  displayName: String
  email: String
  adminPassword: PasswordState
  avatar: ImageFieldOutput
  role: UserRoleType
  createdAt: DateTime
  groups(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  groupsCount(where: GroupMemberWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

enum UserRoleType {
  dev
  admin
  user
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  lastName: StringFilter
  email: StringFilter
  adminPassword: PasswordFilter
  localAuth: UserLocalAuthWhereInput
  role: UserRoleTypeNullableFilter
  createdAt: DateTimeNullableFilter
  groups: GroupMemberManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserLocalAuthWhereInput {
  AND: [UserLocalAuthWhereInput!]
  OR: [UserLocalAuthWhereInput!]
  NOT: [UserLocalAuthWhereInput!]
  id: IDFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input GroupMemberManyRelationFilter {
  every: GroupMemberWhereInput
  some: GroupMemberWhereInput
  none: GroupMemberWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  lastName: String
  email: String
  adminPassword: String
  avatar: ImageFieldInput
  role: UserRoleType
  createdAt: DateTime
  groups: GroupMemberRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input GroupMemberRelateToManyForUpdateInput {
  disconnect: [GroupMemberWhereUniqueInput!]
  set: [GroupMemberWhereUniqueInput!]
  create: [GroupMemberCreateInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  lastName: String
  email: String
  adminPassword: String
  avatar: ImageFieldInput
  role: UserRoleType
  createdAt: DateTime
  groups: GroupMemberRelateToManyForCreateInput
}

input GroupMemberRelateToManyForCreateInput {
  create: [GroupMemberCreateInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

type Group {
  id: ID!
  name: String
  members(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  membersCount(where: GroupMemberWhereInput! = {}): Int
}

input GroupWhereUniqueInput {
  id: ID
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
  members: GroupMemberManyRelationFilter
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input GroupUpdateInput {
  name: String
  members: GroupMemberRelateToManyForUpdateInput
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
  members: GroupMemberRelateToManyForCreateInput
}

type GroupMember {
  id: ID!
  group: Group
  user: User
  access: Int
}

input GroupMemberWhereUniqueInput {
  id: ID
}

input GroupMemberWhereInput {
  AND: [GroupMemberWhereInput!]
  OR: [GroupMemberWhereInput!]
  NOT: [GroupMemberWhereInput!]
  id: IDFilter
  group: GroupWhereInput
  user: UserWhereInput
  access: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input GroupMemberOrderByInput {
  id: OrderDirection
  access: OrderDirection
}

input GroupMemberUpdateInput {
  group: GroupRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  access: Int
}

input GroupRelateToOneForUpdateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input GroupMemberUpdateArgs {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateInput!
}

input GroupMemberCreateInput {
  group: GroupRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  access: Int
}

input GroupRelateToOneForCreateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Post {
  id: ID!
  title: String
  content: String
  tags(where: PostTagWhereInput! = {}, orderBy: [PostTagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostTagWhereUniqueInput): [PostTag!]
  tagsCount(where: PostTagWhereInput! = {}): Int
  coverImage: ImageFieldOutput
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
  tags: PostTagManyRelationFilter
}

input PostTagManyRelationFilter {
  every: PostTagWhereInput
  some: PostTagWhereInput
  none: PostTagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input PostUpdateInput {
  title: String
  content: String
  tags: PostTagRelateToManyForUpdateInput
  coverImage: ImageFieldInput
}

input PostTagRelateToManyForUpdateInput {
  disconnect: [PostTagWhereUniqueInput!]
  set: [PostTagWhereUniqueInput!]
  create: [PostTagCreateInput!]
  connect: [PostTagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: String
  tags: PostTagRelateToManyForCreateInput
  coverImage: ImageFieldInput
}

input PostTagRelateToManyForCreateInput {
  create: [PostTagCreateInput!]
  connect: [PostTagWhereUniqueInput!]
}

type PostTag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input PostTagWhereUniqueInput {
  id: ID
}

input PostTagWhereInput {
  AND: [PostTagWhereInput!]
  OR: [PostTagWhereInput!]
  NOT: [PostTagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostTagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PostTagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PostTagUpdateArgs {
  where: PostTagWhereUniqueInput!
  data: PostTagUpdateInput!
}

input PostTagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createGroupMember(data: GroupMemberCreateInput!): GroupMember
  createGroupMembers(data: [GroupMemberCreateInput!]!): [GroupMember]
  updateGroupMember(where: GroupMemberWhereUniqueInput!, data: GroupMemberUpdateInput!): GroupMember
  updateGroupMembers(data: [GroupMemberUpdateArgs!]!): [GroupMember]
  deleteGroupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  deleteGroupMembers(where: [GroupMemberWhereUniqueInput!]!): [GroupMember]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createPostTag(data: PostTagCreateInput!): PostTag
  createPostTags(data: [PostTagCreateInput!]!): [PostTag]
  updatePostTag(where: PostTagWhereUniqueInput!, data: PostTagUpdateInput!): PostTag
  updatePostTags(data: [PostTagUpdateArgs!]!): [PostTag]
  deletePostTag(where: PostTagWhereUniqueInput!): PostTag
  deletePostTags(where: [PostTagWhereUniqueInput!]!): [PostTag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, adminPassword: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  authclient_login(email: String!, password: String!): ClientItemAuthenticationWithPasswordResult
  authclient_register(email: String!, firstName: String!, lastName: String, password: String!): Boolean
  authclient_requestPasswordReset(email: String!): Boolean
  authclient_newAccountPasswordReset(email: String!): Boolean
  authclient_resetPassword(token: String!, password: String!): Boolean
  authclient_changePassword(oldPassword: String!, newPassword: String!): Boolean
  TestMethodMutation: TestMethodMutationOutput
}

union ClientItemAuthenticationWithPasswordResult = ClientItemAuthenticationWithPasswordSuccess | ClientItemAuthenticationWithPasswordFailure

type ClientItemAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type ClientItemAuthenticationWithPasswordFailure {
  message: String!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  adminPassword: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  group(where: GroupWhereUniqueInput!): Group
  groupsCount(where: GroupWhereInput! = {}): Int
  groupMembers(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  groupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  groupMembersCount(where: GroupMemberWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  postTags(where: PostTagWhereInput! = {}, orderBy: [PostTagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostTagWhereUniqueInput): [PostTag!]
  postTag(where: PostTagWhereUniqueInput!): PostTag
  postTagsCount(where: PostTagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  TestMethod(input: TestMethodInput!): TestMethodOutput
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type TestMethodOutput {
  output: String
  args: TestMethodOutput_Args
  posts: [Post]
}

type TestMethodOutput_Args {
  input: String!
  x: Float!
}

input TestMethodInput {
  input: String
  x: Float
}

type TestMethodMutationOutputDetails {
  id: String!
  name: String!
}

type TestMethodMutationOutput {
  post: String!
  details: TestMethodMutationOutputDetails!
  sub(input: SubInput!): SubOutput
}

type SubOutput {
  parentID: String!
  sum: Float!
}

input SubInput {
  x: Float!
  y: Float!
}

type Time {
  iso: String!
}

input TimeInput {
  repoFullName: String!
}

type Subscription {
  time(input: TimeInput!): Time
  asyncType(input: AsyncTypeInput!): AsyncTypeReturn
}

type AsyncTypeReturn {
  word: String!
  id: String!
  title: String!
  input: String!
  x: Float!
}

input AsyncTypeInput {
  input: String
  x: Float
}
