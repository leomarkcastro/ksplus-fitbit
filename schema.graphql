# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  lastName: String
  displayName: String
  email: String
  adminPassword: PasswordState
  avatar: ImageFieldOutput
  role: UserRoleType
  createdAt: DateTime
  groups(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  groupsCount(where: GroupMemberWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

enum UserRoleType {
  dev
  admin
  user
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  lastName: StringFilter
  email: StringFilter
  adminPassword: PasswordFilter
  localAuth: UserLocalAuthWhereInput
  role: UserRoleTypeNullableFilter
  createdAt: DateTimeNullableFilter
  groups: GroupMemberManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserLocalAuthWhereInput {
  AND: [UserLocalAuthWhereInput!]
  OR: [UserLocalAuthWhereInput!]
  NOT: [UserLocalAuthWhereInput!]
  id: IDFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input GroupMemberManyRelationFilter {
  every: GroupMemberWhereInput
  some: GroupMemberWhereInput
  none: GroupMemberWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  lastName: String
  email: String
  adminPassword: String
  avatar: ImageFieldInput
  role: UserRoleType
  createdAt: DateTime
  groups: GroupMemberRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input GroupMemberRelateToManyForUpdateInput {
  disconnect: [GroupMemberWhereUniqueInput!]
  set: [GroupMemberWhereUniqueInput!]
  create: [GroupMemberCreateInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  lastName: String
  email: String
  adminPassword: String
  avatar: ImageFieldInput
  role: UserRoleType
  createdAt: DateTime
  groups: GroupMemberRelateToManyForCreateInput
}

input GroupMemberRelateToManyForCreateInput {
  create: [GroupMemberCreateInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

type Group {
  id: ID!
  name: String
  members(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  membersCount(where: GroupMemberWhereInput! = {}): Int
}

input GroupWhereUniqueInput {
  id: ID
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
  members: GroupMemberManyRelationFilter
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input GroupUpdateInput {
  name: String
  members: GroupMemberRelateToManyForUpdateInput
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
  members: GroupMemberRelateToManyForCreateInput
}

type GroupMember {
  id: ID!
  group: Group
  user: User
  access: Int
}

input GroupMemberWhereUniqueInput {
  id: ID
}

input GroupMemberWhereInput {
  AND: [GroupMemberWhereInput!]
  OR: [GroupMemberWhereInput!]
  NOT: [GroupMemberWhereInput!]
  id: IDFilter
  group: GroupWhereInput
  user: UserWhereInput
  access: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input GroupMemberOrderByInput {
  id: OrderDirection
  access: OrderDirection
}

input GroupMemberUpdateInput {
  group: GroupRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  access: Int
}

input GroupRelateToOneForUpdateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input GroupMemberUpdateArgs {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateInput!
}

input GroupMemberCreateInput {
  group: GroupRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  access: Int
}

input GroupRelateToOneForCreateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type ServerLog {
  id: ID!
  method: String
  url: String
  status: String
  elapsed: String
  graphql: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

input ServerLogWhereUniqueInput {
  id: ID
}

input ServerLogWhereInput {
  AND: [ServerLogWhereInput!]
  OR: [ServerLogWhereInput!]
  NOT: [ServerLogWhereInput!]
  id: IDFilter
  method: StringFilter
  url: StringFilter
  status: StringFilter
  elapsed: StringFilter
  graphql: StringFilter
  userID: StringFilter
  errorMessage: StringFilter
  createdAt: DateTimeNullableFilter
}

input ServerLogOrderByInput {
  id: OrderDirection
  method: OrderDirection
  url: OrderDirection
  status: OrderDirection
  elapsed: OrderDirection
  graphql: OrderDirection
  userID: OrderDirection
  errorMessage: OrderDirection
  createdAt: OrderDirection
}

input ServerLogUpdateInput {
  method: String
  url: String
  status: String
  elapsed: String
  graphql: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

input ServerLogUpdateArgs {
  where: ServerLogWhereUniqueInput!
  data: ServerLogUpdateInput!
}

input ServerLogCreateInput {
  method: String
  url: String
  status: String
  elapsed: String
  graphql: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

type ServerError {
  id: ID!
  method: String
  url: String
  status: String
  graphql: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

input ServerErrorWhereUniqueInput {
  id: ID
}

input ServerErrorWhereInput {
  AND: [ServerErrorWhereInput!]
  OR: [ServerErrorWhereInput!]
  NOT: [ServerErrorWhereInput!]
  id: IDFilter
  method: StringFilter
  url: StringFilter
  status: StringFilter
  graphql: StringFilter
  userID: StringFilter
  errorMessage: StringFilter
  createdAt: DateTimeNullableFilter
}

input ServerErrorOrderByInput {
  id: OrderDirection
  method: OrderDirection
  url: OrderDirection
  status: OrderDirection
  graphql: OrderDirection
  userID: OrderDirection
  errorMessage: OrderDirection
  createdAt: OrderDirection
}

input ServerErrorUpdateInput {
  method: String
  url: String
  status: String
  graphql: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

input ServerErrorUpdateArgs {
  where: ServerErrorWhereUniqueInput!
  data: ServerErrorUpdateInput!
}

input ServerErrorCreateInput {
  method: String
  url: String
  status: String
  graphql: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createGroupMember(data: GroupMemberCreateInput!): GroupMember
  createGroupMembers(data: [GroupMemberCreateInput!]!): [GroupMember]
  updateGroupMember(where: GroupMemberWhereUniqueInput!, data: GroupMemberUpdateInput!): GroupMember
  updateGroupMembers(data: [GroupMemberUpdateArgs!]!): [GroupMember]
  deleteGroupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  deleteGroupMembers(where: [GroupMemberWhereUniqueInput!]!): [GroupMember]
  createServerLog(data: ServerLogCreateInput!): ServerLog
  createServerLogs(data: [ServerLogCreateInput!]!): [ServerLog]
  updateServerLog(where: ServerLogWhereUniqueInput!, data: ServerLogUpdateInput!): ServerLog
  updateServerLogs(data: [ServerLogUpdateArgs!]!): [ServerLog]
  deleteServerLog(where: ServerLogWhereUniqueInput!): ServerLog
  deleteServerLogs(where: [ServerLogWhereUniqueInput!]!): [ServerLog]
  createServerError(data: ServerErrorCreateInput!): ServerError
  createServerErrors(data: [ServerErrorCreateInput!]!): [ServerError]
  updateServerError(where: ServerErrorWhereUniqueInput!, data: ServerErrorUpdateInput!): ServerError
  updateServerErrors(data: [ServerErrorUpdateArgs!]!): [ServerError]
  deleteServerError(where: ServerErrorWhereUniqueInput!): ServerError
  deleteServerErrors(where: [ServerErrorWhereUniqueInput!]!): [ServerError]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, adminPassword: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  authclient_login(email: String!, password: String!): ClientItemAuthenticationWithPasswordResult
  authclient_register(email: String!, firstName: String!, lastName: String, password: String!): Boolean
  authclient_requestPasswordReset(email: String!): Boolean
  authclient_newAccountPasswordReset(email: String!): Boolean
  authclient_resetPassword(token: String!, password: String!): Boolean
  authclient_changePassword(oldPassword: String!, newPassword: String!): Boolean
}

union ClientItemAuthenticationWithPasswordResult = ClientItemAuthenticationWithPasswordSuccess | ClientItemAuthenticationWithPasswordFailure

type ClientItemAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type ClientItemAuthenticationWithPasswordFailure {
  message: String!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  adminPassword: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  group(where: GroupWhereUniqueInput!): Group
  groupsCount(where: GroupWhereInput! = {}): Int
  groupMembers(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  groupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  groupMembersCount(where: GroupMemberWhereInput! = {}): Int
  serverLogs(where: ServerLogWhereInput! = {}, orderBy: [ServerLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServerLogWhereUniqueInput): [ServerLog!]
  serverLog(where: ServerLogWhereUniqueInput!): ServerLog
  serverLogsCount(where: ServerLogWhereInput! = {}): Int
  serverErrors(where: ServerErrorWhereInput! = {}, orderBy: [ServerErrorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServerErrorWhereUniqueInput): [ServerError!]
  serverError(where: ServerErrorWhereUniqueInput!): ServerError
  serverErrorsCount(where: ServerErrorWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  ErrorTest: String
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
