{
  "version": 3,
  "sources": ["../keystone.ts", "../auth.ts", "../common/roles.ts", "../utils/config/env.ts", "../dbConfig.ts", "../fileConfig.ts", "../graphql/extensions/auth.ts", "../server/services/auth/login.ts", "../server/services/auth/reset_password.ts", "../server/services/jwt/index.ts", "../server/services/mail/index.ts", "../graphql/extensions/test.ts", "../graphql/extensions/index.ts", "../imageConfig.ts", "../schema/UserData.ts", "../graphql/operations.ts", "../utils/functions/deepMerge.ts", "../common/access/definitions/access.ts", "../common/access/definitions/templates.ts", "../schema.ts", "../server/index.ts", "../server/api/index.ts", "../server/api/auth/index.ts", "../server/declarations.ts", "../server/services/access/serverAccessConfig.ts", "../server/services/middleware/errorHandler.ts"],
  "sourcesContent": ["import { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\nimport { config } from \"@keystone-6/core\";\nimport { z } from \"zod\";\n\nextendZodWithOpenApi(z);\n\nimport { session, withAuth } from \"./auth\";\nimport { GlobalTypeInfo } from \"./common/types\";\nimport dbConfig from \"./dbConfig\";\nimport s3FilesStorageConfig, { s3FilesConfigKey } from \"./fileConfig\";\nimport { boostrapGraphqlExtensions } from \"./graphql/extensions\";\nimport s3ImageStorageConfig, { s3ImageConfigKey } from \"./imageConfig\";\nimport { lists } from \"./schema\";\nimport bootstrapExpress from \"./server\";\nimport { CONFIG } from \"./utils/config/env\";\n\nconst keystoneConfig = config<GlobalTypeInfo>({\n  db: dbConfig,\n  lists,\n  session,\n  graphql: {\n    playground: CONFIG.GRAPHQL_INSTROSPECTION === \"true\",\n    apolloConfig: {\n      introspection: CONFIG.GRAPHQL_INSTROSPECTION === \"true\",\n      // WARN: This is a security risk, should be configured properly, but cant be done in this project\n      csrfPrevention: false,\n    },\n  },\n  server: {\n    cors: {\n      origin: CONFIG.SERVER_CORS_URL.split(\",\"),\n      // secure: true,\n    },\n    extendExpressApp: bootstrapExpress,\n  },\n  extendGraphqlSchema: boostrapGraphqlExtensions,\n  storage: {\n    [s3FilesConfigKey]: s3FilesStorageConfig,\n    [s3ImageConfigKey]: s3ImageStorageConfig,\n  },\n});\n\nexport default withAuth(keystoneConfig);\n", "import { createAuth } from \"@keystone-6/auth\";\n\nimport { statelessSessions } from \"@keystone-6/core/session\";\n\nimport { PERMISSION_ENUM } from \"./common/roles\";\nimport { AuthedSession } from \"./common/types\";\nimport { CONFIG } from \"./utils/config/env\";\n\nlet sessionSecret = CONFIG.SESSION_SECRET;\n\nconst { withAuth } = createAuth({\n  listKey: \"User\",\n  identityField: \"email\",\n\n  sessionData: \"id name createdAt role\",\n  secretField: \"adminPassword\",\n\n  initFirstItem: {\n    fields: [\"name\", \"email\", \"adminPassword\"],\n    itemData: {\n      role: PERMISSION_ENUM.DEV,\n    },\n  },\n});\n\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\nconst session = statelessSessions<AuthedSession>({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { session, withAuth };\n", "export const PERMISSION_ENUM = {\n  DEV: \"dev\",\n  ADMIN: \"admin\",\n  USER: \"user\",\n};\n\nexport const ALL_PERMISSIONS_LIST = Object.values(PERMISSION_ENUM);\n\nexport const ACCESS_LEVELS = {\n  VIEW: 1,\n  EDIT: 2,\n  ADMIN: 3,\n};\n", "import * as dotenv from 'dotenv';\ndotenv.config();\n\nexport const CONFIG = {\n  DATABASE_URL: process.env.DATABASE_URL || '',\n  GRAPHQL_INSTROSPECTION: process.env.GRAPHQL_INSTROSPECTION || 'true',\n  S3_BUCKET_NAME: process.env.S3_BUCKET_NAME || '',\n  S3_REGION: process.env.S3_REGION || '',\n  S3_ACCESS_KEY_ID: process.env.S3_ACCESS_KEY_ID || '',\n  S3_SECRET_ACCESS_KEY: process.env.S3_SECRET_ACCESS_KEY || '',\n  S3_ENDPOINT: process.env.S3_ENDPOINT || '',\n  S3_FORCE_PATH_STYLE: process.env.S3_FORCE_PATH_STYLE || '',\n  SERVER_CORS_HEADERS:\n    process.env.SERVER_CORS_HEADERS ||\n    '\"Origin, X-Requested-With, Content-Type, Accept, Authorization\"',\n  SERVER_CORS_URL: process.env.SERVER_CORS_URL || '\"*\"',\n  SESSION_SECRET:\n    process.env.SESSION_SECRET ||\n    '\"secretashdasifhjldgjaisjflsjkasldfklaskdjf\"',\n  MAILER_BREVO_API_KEY: process.env.MAILER_BREVO_API_KEY || 'secret',\n  MAILER_NAME: process.env.MAILER_NAME || 'mailer',\n  MAILER_EMAILADDRESS: process.env.MAILER_EMAILADDRESS || 'mailer@test.com',\n  BREVO_TEMPLATE_NEW_ACCOUNT: process.env.BREVO_TEMPLATE_NEW_ACCOUNT || '4',\n  BREVO_TEMPLATE_RESET_PASSWORD:\n    process.env.BREVO_TEMPLATE_RESET_PASSWORD || '6',\n  BREVO_TEMPLATE_2FA_LOGIN: process.env.BREVO_TEMPLATE_2FA_LOGIN || '7',\n  BREVO_TEMPLATE_EVENT_REMINDER:\n    process.env.BREVO_TEMPLATE_EVENT_REMINDER || '8',\n  BASE_URL: process.env.BASE_URL || 'http://localhost:3000',\n  PAGE_URL: process.env.PAGE_URL || 'http://localhost:300',\n  RUN_CRON_JOB: process.env.RUN_CRON_JOB || 'true',\n  NEW_ACCOUNT_URL: process.env.NEW_ACCOUNT_URL || '/new-account',\n  PAGE_RESET_PASSWORD_URL:\n    process.env.PAGE_RESET_PASSWORD_URL || '/reset-password',\n  JWT_SECRET: process.env.JWT_SECRET || 'secret',\n};\n", "import { DatabaseConfig } from \"@keystone-6/core/types\";\nimport { GlobalTypeInfo } from \"./common/types\";\nimport { CONFIG } from \"./utils/config/env\";\n\nconst dbConfig: DatabaseConfig<GlobalTypeInfo> = {\n  provider: \"postgresql\",\n  url: CONFIG.DATABASE_URL,\n};\n\nexport default dbConfig;\n", "import { StorageConfig } from \"@keystone-6/core/types\";\nimport { CONFIG } from \"./utils/config/env\";\n\nconst s3FilesStorageConfig: StorageConfig = {\n  kind: \"s3\",\n  type: \"file\",\n  bucketName: CONFIG.S3_BUCKET_NAME,\n  region: CONFIG.S3_REGION,\n  accessKeyId: CONFIG.S3_ACCESS_KEY_ID,\n  secretAccessKey: CONFIG.S3_SECRET_ACCESS_KEY,\n  signed: { expiry: 5000 },\n  endpoint: CONFIG.S3_ENDPOINT,\n  forcePathStyle: CONFIG.S3_FORCE_PATH_STYLE === \"true\",\n};\n\nexport const s3FilesConfigKey = \"my_S3_files\";\nexport default s3FilesStorageConfig;\n", "import { graphql } from \"@keystone-6/core\";\nimport { BaseItem } from \"@keystone-6/core/types\";\nimport { GlobalContext } from \"../../common/types\";\nimport { authenticateUser } from \"../../server/services/auth/login\";\nimport {\n  changePassword,\n  requestResetPassword,\n  resetPassword,\n  resetPasswordForNewUser,\n} from \"../../server/services/auth/reset_password\";\n\nconst gqlNames = {\n  ItemAuthenticationWithPasswordSuccess:\n    \"ClientItemAuthenticationWithPasswordSuccess\",\n  ItemAuthenticationWithPasswordFailure:\n    \"ClientItemAuthenticationWithPasswordFailure\",\n  ItemAuthenticationWithPasswordResult:\n    \"ClientItemAuthenticationWithPasswordResult\",\n};\nconst listKey = \"User\";\nconst identityField = \"email\";\nconst secretField = \"password\";\n\nexport const clientAuthGraphqlExtension = graphql.extend((base) => {\n  const ItemAuthenticationWithPasswordSuccess = graphql.object<{\n    sessionToken: string;\n    item: BaseItem;\n  }>()({\n    name: gqlNames.ItemAuthenticationWithPasswordSuccess,\n    fields: {\n      sessionToken: graphql.field({ type: graphql.nonNull(graphql.String) }),\n      item: graphql.field({ type: graphql.nonNull(base.object(listKey)) }),\n    },\n  });\n  const ItemAuthenticationWithPasswordFailure = graphql.object<{\n    message: string;\n  }>()({\n    name: gqlNames.ItemAuthenticationWithPasswordFailure,\n    fields: {\n      message: graphql.field({ type: graphql.nonNull(graphql.String) }),\n    },\n  });\n\n  const AuthenticationResult = graphql.union({\n    name: gqlNames.ItemAuthenticationWithPasswordResult,\n    types: [\n      ItemAuthenticationWithPasswordSuccess,\n      ItemAuthenticationWithPasswordFailure,\n    ],\n    resolveType(val) {\n      if (\"sessionToken\" in val) {\n        return gqlNames.ItemAuthenticationWithPasswordSuccess;\n      }\n      return gqlNames.ItemAuthenticationWithPasswordFailure;\n    },\n  });\n  return {\n    mutation: {\n      authclient_login: graphql.field({\n        type: AuthenticationResult,\n        args: {\n          [identityField]: graphql.arg({\n            type: graphql.nonNull(graphql.String),\n          }),\n          [secretField]: graphql.arg({ type: graphql.nonNull(graphql.String) }),\n        },\n        async resolve(\n          _,\n          { [identityField]: identity, [secretField]: secret },\n          context: GlobalContext,\n        ) {\n          if (!context.sessionStrategy) {\n            throw new Error(\"No session implementation available on context\");\n          }\n\n          const user = await context.prisma.user.findUnique({\n            where: { [identityField]: identity },\n          });\n\n          if (!user) {\n            return { code: \"FAILURE\", message: \"Authentication failed.\" };\n          }\n\n          const verifyResult = await authenticateUser(\n            {\n              email: identity,\n              password: secret,\n            },\n            context,\n          );\n\n          if (!verifyResult) {\n            return { code: \"FAILURE\", message: \"Authentication failed.\" };\n          }\n\n          // Create session token\n          const sessionToken = await context.sessionStrategy.start({\n            data: {\n              listKey: \"User\",\n              itemId: verifyResult.id,\n              data: {\n                role: verifyResult.role,\n                id: verifyResult.id,\n                name: verifyResult.name,\n                createdAt: verifyResult.createdAt.toISOString(),\n              },\n            },\n            context,\n          });\n\n          // return Failure if sessionStrategy.start() returns null\n          if (typeof sessionToken !== \"string\" || sessionToken.length === 0) {\n            return { code: \"FAILURE\", message: \"Failed to start session.\" };\n          }\n\n          return { sessionToken, item: user };\n        },\n      }),\n      authclient_requestPasswordReset: graphql.field({\n        type: graphql.Boolean,\n        args: {\n          email: graphql.arg({ type: graphql.nonNull(graphql.String) }),\n        },\n        async resolve(_, { email }, context: GlobalContext) {\n          // Call the appropriate service function\n          try {\n            await requestResetPassword(email, \"1h\", context);\n            return true;\n          } catch (e) {\n            console.error(e);\n            return false;\n          }\n        },\n      }),\n      authclient_newAccountPasswordReset: graphql.field({\n        type: graphql.Boolean,\n        args: {\n          email: graphql.arg({ type: graphql.nonNull(graphql.String) }),\n        },\n        async resolve(_, { email }, context: GlobalContext) {\n          // Call the appropriate service function\n          try {\n            await resetPasswordForNewUser(\n              {\n                email,\n              },\n              context,\n            );\n            return true;\n          } catch (e) {\n            console.error(e);\n            return false;\n          }\n        },\n      }),\n      authclient_resetPassword: graphql.field({\n        type: graphql.Boolean,\n        args: {\n          token: graphql.arg({ type: graphql.nonNull(graphql.String) }),\n          password: graphql.arg({ type: graphql.nonNull(graphql.String) }),\n        },\n        async resolve(_, { token, password }, context: GlobalContext) {\n          // Call the appropriate service function\n          try {\n            // await resetPasswordForNewUser({ email, token, password }, context);\n            await resetPassword(token, password, context);\n            return true;\n          } catch (e) {\n            console.error(e);\n            return false;\n          }\n        },\n      }),\n      authclient_changePassword: graphql.field({\n        type: graphql.Boolean,\n        args: {\n          oldPassword: graphql.arg({ type: graphql.nonNull(graphql.String) }),\n          newPassword: graphql.arg({ type: graphql.nonNull(graphql.String) }),\n        },\n        async resolve(_, { oldPassword, newPassword }, context: GlobalContext) {\n          // Call the appropriate service function\n          try {\n            // console.log(\n            //   await context.\n            // );\n            if (!context.session?.data.id) throw new Error(\"No user session\");\n            await changePassword(\n              {\n                id: context.session?.data.id,\n              },\n              {\n                oldPassword,\n                newPassword,\n              },\n              context,\n            );\n            return true;\n          } catch (e) {\n            console.error(e);\n            return false;\n          }\n        },\n      }),\n    },\n  };\n});\n", "import { compareSync } from \"bcrypt\";\nimport { GlobalContext } from \"../../../common/types\";\nimport { IUserJwt } from \"./UserJWT.dto\";\n\nexport async function authenticateUser(\n  args: { email: string; password: string },\n  context: GlobalContext,\n) {\n  return validateUserViaPassword(args, context);\n}\n\nexport async function validateUserViaPassword(\n  args: {\n    email: string;\n    password: string;\n  },\n  context: GlobalContext,\n): Promise<IUserJwt | null> {\n  const user = await context.prisma.user.findUnique({\n    where: { email: args.email },\n    include: {\n      localAuth: true,\n    },\n  });\n\n  // check if user exists\n  if (!user) return null;\n\n  // check if user can login with password\n  if (!user.localAuth) return null;\n\n  // validate password\n  const passHash = user.localAuth.password;\n  const validate = compareSync(args.password, passHash);\n  if (!validate) return null;\n\n  return {\n    type: \"auth\",\n    id: user.id,\n    email: user.email,\n    name: user.name,\n    role: user.role ?? \"\",\n    createdAt: new Date(),\n  };\n}\n", "import { compareSync, hashSync } from \"bcrypt\";\nimport { GlobalContext } from \"../../../common/types\";\nimport { CONFIG } from \"../../../utils/config/env\";\nimport { jwt_sign, jwt_verify } from \"../jwt\";\nimport { sendEmailByBrevoTemplate } from \"../mail\";\nimport { IChangePassword, IUserJwt } from \"./UserJWT.dto\";\n\nexport async function resetPasswordForNewUser(\n  args: { email: string },\n  context: GlobalContext,\n) {\n  const user = await context.prisma.user.findUnique({\n    where: { email: args.email },\n  });\n  if (!user) return;\n\n  const resetPassword: IUserJwt = {\n    id: user.id,\n    email: user.email,\n    name: user.name,\n    role: user.role ?? \"\",\n    type: \"reset-password\",\n    createdAt: new Date(),\n  };\n\n  const token = await jwt_sign(resetPassword, {\n    expiresIn: \"3d\",\n  });\n\n  // send email\n  await sendEmailByBrevoTemplate(\n    user.email,\n    \"New Account Setup\",\n    CONFIG.BREVO_TEMPLATE_NEW_ACCOUNT,\n    {\n      username:\n        user.name + (user.lastName ? ` ${user.lastName}` : \"\") || user.email,\n      reset_url: `${CONFIG.PAGE_URL}${CONFIG.PAGE_RESET_PASSWORD_URL}?token=${token}`,\n    },\n  );\n\n  console.log(\"[System] Reset password for new user:\", user.email);\n}\n\nexport async function requestResetPassword(\n  email: string,\n  expiry = \"1h\",\n  config: GlobalContext,\n) {\n  const user = await config.prisma.user.findUnique({\n    where: { email },\n  });\n  if (!user) return;\n\n  const resetPassword: IUserJwt = {\n    id: user.id,\n    email: user.email,\n    name: user.name,\n    role: user.role ?? \"\",\n    type: \"reset-password\",\n    createdAt: new Date(),\n  };\n\n  const token = await jwt_sign(resetPassword, {\n    expiresIn: expiry,\n  });\n\n  // send email\n  await sendEmailByBrevoTemplate(\n    user.email,\n    \"Reset Password\",\n    CONFIG.BREVO_TEMPLATE_RESET_PASSWORD,\n    {\n      username:\n        user.name + (user.lastName ? ` ${user.lastName}` : \"\") || user.email,\n      time_date: new Date().toLocaleString(),\n      reset_url: `${CONFIG.PAGE_URL}${CONFIG.PAGE_RESET_PASSWORD_URL}?token=${token}`,\n    },\n  );\n}\n\nexport async function resetPassword(\n  token: string,\n  newPassword: string,\n  context: GlobalContext,\n) {\n  const decoded = (await jwt_verify(token)) as IUserJwt;\n  if (!decoded) return;\n  if (decoded.type !== \"reset-password\") return;\n\n  const hashedPassword = hashSync(newPassword, 10);\n\n  const userObj = await context.prisma.user.findUnique({\n    where: { id: decoded.id },\n    include: {\n      localAuth: true,\n    },\n  });\n  if (!userObj) throw new Error(\"User not found\");\n\n  if (!userObj.localAuth) {\n    await context.prisma.user.update({\n      where: { id: decoded.id },\n      data: {\n        localAuth: {\n          create: {\n            password: hashedPassword,\n          },\n        },\n      },\n    });\n  }\n\n  await context.prisma.user.update({\n    where: { id: decoded.id },\n    data: {\n      localAuth: {\n        update: {\n          password: hashedPassword,\n        },\n      },\n    },\n  });\n}\n\nexport async function changePassword(\n  user: {\n    id: string;\n  },\n  passwordInput: IChangePassword,\n  context: GlobalContext,\n) {\n  const userObj = await context.prisma.user.findUnique({\n    where: { id: user.id },\n    include: {\n      localAuth: true,\n    },\n  });\n  if (!userObj) throw new Error(\"User not found\");\n\n  if (!userObj.localAuth) {\n    // create local auth\n    const hashedPassword = hashSync(passwordInput.newPassword, 10);\n\n    await context.prisma.userLocalAuth.create({\n      data: {\n        password: hashedPassword,\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n\n    return;\n  }\n\n  const validate = compareSync(\n    passwordInput.oldPassword,\n    userObj.localAuth.password,\n  );\n  if (!validate) throw new Error(\"Wrong password\");\n\n  const hashedPassword = hashSync(passwordInput.newPassword, 10);\n\n  await context.prisma.userLocalAuth.update({\n    where: { id: userObj.localAuth.id },\n    data: {\n      password: hashedPassword,\n    },\n  });\n}\n", "import jwt, { SignOptions } from \"jsonwebtoken\";\nimport { CONFIG } from \"../../../utils/config/env\";\n\nexport async function jwt_sign(\n  data: Record<string, any>,\n  options: SignOptions,\n) {\n  const token = jwt.sign(data, CONFIG.JWT_SECRET, options);\n\n  return token;\n}\n\nexport async function jwt_verify(token: string) {\n  const data = jwt.verify(token, CONFIG.JWT_SECRET);\n\n  return data;\n}\n", "import * as SibApiV3Sdk from \"sib-api-v3-typescript\";\nimport { CONFIG } from \"../../../utils/config/env\";\n\nasync function _sendBatchEmailTemplateRoutine(\n  options: {\n    subject: string;\n    template?: string;\n    html?: string;\n    cc?: string;\n  },\n  messageVersions: SibApiV3Sdk.SendSmtpEmailMessageVersions[],\n) {\n  const apiInstance = new SibApiV3Sdk.TransactionalEmailsApi();\n\n  // @ts-expect-error - this just works, if there's a way to properly type this, please let me know\n  const apiKey = apiInstance.authentications[\"apiKey\"];\n  apiKey.apiKey = CONFIG.MAILER_BREVO_API_KEY;\n  const sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n  sendSmtpEmail.subject = options.subject;\n  if (options.template) {\n    sendSmtpEmail.templateId = Number(options.template);\n  } else if (options.html) {\n    sendSmtpEmail.htmlContent = options.html as string;\n  }\n  sendSmtpEmail.sender = {\n    name: CONFIG.MAILER_NAME,\n    email: CONFIG.MAILER_EMAILADDRESS,\n  };\n  if (options.cc) sendSmtpEmail.cc = [{ email: options.cc as string }];\n  // sendSmtpEmail.bcc = [{ name: 'John Doe', email: 'example@example.com' }];\n  // sendSmtpEmail.replyTo = { email: 'replyto@domain.com', name: 'John Doe' };\n  // sendSmtpEmail.headers = { 'Some-Custom-Name': 'unique-id-1234' };\n  // sendSmtpEmail.params = {\n  //   parameter: 'My param value',\n  //   subject: 'New Subject',\n  // };\n  sendSmtpEmail.messageVersions = messageVersions;\n\n  try {\n    const res = await apiInstance.sendTransacEmail(sendSmtpEmail);\n    // Logger.log(res);\n    return res;\n  } catch (err) {\n    console.error(err);\n    return err;\n  }\n}\n\nexport async function sendBatchEmailByBrevoTemplate(\n  messageVersions: SibApiV3Sdk.SendSmtpEmailMessageVersions[],\n  subject: string,\n  templateId: string,\n) {\n  const messageId = await _sendBatchEmailTemplateRoutine(\n    {\n      subject: subject,\n      template: templateId,\n    },\n    messageVersions,\n  );\n\n  return messageId;\n}\n\nexport async function sendEmailByBrevoTemplate(\n  to: string,\n  subject: string,\n  templateId: string,\n  params: SibApiV3Sdk.SendSmtpEmail[\"params\"],\n) {\n  const messageId = await _sendEmailRoutine(\n    {\n      to: to,\n      cc: \"\",\n      subject: subject,\n      template: templateId,\n    },\n    {\n      templateParams: params,\n    },\n  );\n\n  return messageId;\n}\n\nasync function _sendEmailRoutine(\n  options: any,\n  extra?: {\n    templateParams?: SibApiV3Sdk.SendSmtpEmail[\"params\"];\n  },\n) {\n  const apiInstance = new SibApiV3Sdk.TransactionalEmailsApi();\n\n  // @ts-expect-error - this just works, if there's a way to properly type this, please let me know\n  const apiKey = apiInstance.authentications[\"apiKey\"];\n  apiKey.apiKey = CONFIG.MAILER_BREVO_API_KEY;\n  const sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n  sendSmtpEmail.subject = options.subject;\n  if (options.template) {\n    sendSmtpEmail.templateId = Number(options.template);\n  } else if (options.html) {\n    sendSmtpEmail.htmlContent = options.html as string;\n  }\n  sendSmtpEmail.sender = {\n    name: CONFIG.MAILER_NAME,\n    email: CONFIG.MAILER_EMAILADDRESS,\n  };\n  sendSmtpEmail.to = [\n    {\n      email: options.to as string,\n    },\n  ];\n  if (options.cc) sendSmtpEmail.cc = [{ email: options.cc as string }];\n  // sendSmtpEmail.bcc = [{ name: 'John Doe', email: 'example@example.com' }];\n  // sendSmtpEmail.replyTo = { email: 'replyto@domain.com', name: 'John Doe' };\n  // sendSmtpEmail.headers = { 'Some-Custom-Name': 'unique-id-1234' };\n  // sendSmtpEmail.params = {\n  //   parameter: 'My param value',\n  //   subject: 'New Subject',\n  // };\n  if (extra?.templateParams) {\n    sendSmtpEmail.params = extra?.templateParams;\n  }\n  return await apiInstance.sendTransacEmail(sendSmtpEmail);\n}\n", "import { Context } from \".keystone/types\";\nimport { graphql } from \"@keystone-6/core\";\n\nexport const testGraphqlExtension = graphql.extend((base) => {\n  return {\n    query: {\n      test: graphql.field({\n        type: graphql.String,\n        resolve() {\n          return \"Hello world!\";\n        },\n      }),\n    },\n    mutation: {\n      test: graphql.field({\n        type: graphql.String,\n        args: {\n          email: graphql.arg({ type: graphql.String }),\n        },\n        async resolve(source, { email }, context: Context) {\n          const user = await context.db.User.findOne({\n            where: {\n              email: email,\n            },\n          });\n          return `Hello ${user?.name}!`;\n        },\n      }),\n    },\n  };\n});\n", "import type { GraphQLSchema } from \"graphql/type/schema\";\nimport { clientAuthGraphqlExtension } from \"./auth\";\nimport { testGraphqlExtension } from \"./test\";\n\nexport function boostrapGraphqlExtensions(schema: GraphQLSchema) {\n  let _schema = schema;\n  const extensionList = [testGraphqlExtension, clientAuthGraphqlExtension];\n\n  extensionList.forEach((extension) => {\n    _schema = extension(_schema);\n  });\n\n  return _schema;\n}\n", "import { StorageConfig } from \"@keystone-6/core/types\";\nimport { CONFIG } from \"./utils/config/env\";\n\nconst s3ImageStorageConfig: StorageConfig = {\n  kind: \"s3\",\n  type: \"image\",\n  bucketName: CONFIG.S3_BUCKET_NAME,\n  region: CONFIG.S3_REGION,\n  accessKeyId: CONFIG.S3_ACCESS_KEY_ID,\n  secretAccessKey: CONFIG.S3_SECRET_ACCESS_KEY,\n  signed: { expiry: 5000 },\n  endpoint: CONFIG.S3_ENDPOINT,\n  forcePathStyle: CONFIG.S3_FORCE_PATH_STYLE === \"true\",\n};\n\nexport const s3ImageConfigKey = \"my_S3_images\";\nexport default s3ImageStorageConfig;\n", "import type { Lists } from \".keystone/types\";\nimport { graphql, list } from \"@keystone-6/core\";\nimport { denyAll } from \"@keystone-6/core/access\";\nimport {\n  image,\n  password,\n  relationship,\n  select,\n  text,\n  timestamp,\n  virtual,\n} from \"@keystone-6/core/fields\";\nimport { z } from \"zod\";\nimport { accessConfig } from \"../common/access/definitions/access\";\nimport {\n  allow,\n  checkRole,\n  hasRole,\n  isOwner,\n  sequential,\n} from \"../common/access/definitions/templates\";\nimport { PERMISSION_ENUM } from \"../common/roles\";\nimport { GlobalContext } from \"../common/types\";\nimport { s3ImageConfigKey } from \"../imageConfig\";\nimport { resetPasswordForNewUser } from \"../server/services/auth/reset_password\";\n\nexport const userDataList: Lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      lastName: text(),\n      displayName: virtual({\n        field: graphql.field({\n          type: graphql.String,\n          async resolve(item, {}, context: GlobalContext) {\n            return `${item.name} ${item.lastName}`.trim();\n          },\n        }),\n      }),\n      email: text({\n        validation: { isRequired: true },\n        isIndexed: \"unique\",\n        // hooks: {\n        //   resolveInput: async ({ inputData }) => {\n        //     if (!inputData.email) {\n        //       return `user-${Math.random().toString(36).substring(7)}@client`;\n        //     }\n        //     return inputData.email;\n        //   },\n        // },\n      }),\n      adminPassword: password({\n        validation: { isRequired: false },\n        hooks: {\n          validateInput: async ({\n            resolvedData,\n            context,\n            addValidationError,\n          }) => {\n            const role = context?.session?.data?.role;\n\n            if (!resolvedData.adminPassword) {\n              return;\n            }\n\n            if (checkRole(role, [PERMISSION_ENUM.DEV])) {\n              return;\n            }\n\n            const userCount = await context.query.User.count({});\n\n            if (userCount == 0) {\n              return;\n            }\n\n            addValidationError(\"You are not allowed to modify this\");\n          },\n        },\n      }),\n      localAuth: relationship({\n        ref: \"UserLocalAuth.user\",\n        many: false,\n        access: denyAll,\n      }),\n      avatar: image({\n        storage: s3ImageConfigKey,\n      }),\n      role: select({\n        type: \"enum\",\n        options: [\n          { label: \"Dev\", value: PERMISSION_ENUM.DEV },\n          { label: \"Admin\", value: PERMISSION_ENUM.ADMIN },\n          { label: \"User\", value: PERMISSION_ENUM.USER },\n        ],\n        defaultValue: PERMISSION_ENUM.USER,\n        hooks: {\n          validateInput: async ({\n            resolvedData,\n            context,\n            addValidationError,\n          }) => {\n            const role = context?.session?.data?.role;\n            const selectedRole = resolvedData?.role?.toString() ?? \"\";\n\n            if (!selectedRole) {\n              return;\n            }\n\n            if (checkRole(role, [PERMISSION_ENUM.DEV])) {\n              return;\n            }\n\n            if (\n              checkRole(role, [PERMISSION_ENUM.DEV]) &&\n              checkRole(selectedRole, [PERMISSION_ENUM.DEV])\n            ) {\n              return;\n            }\n\n            if (\n              checkRole(role, [PERMISSION_ENUM.ADMIN]) &&\n              !checkRole(selectedRole, [PERMISSION_ENUM.DEV])\n            ) {\n              return;\n            }\n\n            const userCount = await context.query.User.count({});\n\n            if (userCount == 0) {\n              return;\n            }\n\n            addValidationError(\"You are not allowed to change the role\");\n          },\n        },\n      }),\n      createdAt: timestamp({\n        defaultValue: { kind: \"now\" },\n      }),\n    },\n    access: accessConfig({\n      isAuthed: true,\n      // superAccess: [PERMISSION_ENUM.ADMIN],\n      operations: {\n        read: allow,\n        write: hasRole({ roles: [PERMISSION_ENUM.ADMIN] }),\n        update: allow,\n      },\n      filter: {\n        read: allow,\n        write: sequential([\n          hasRole({ roles: [PERMISSION_ENUM.ADMIN] }),\n          isOwner(),\n        ]),\n      },\n    }),\n    hooks: {\n      validateDelete: async ({ item, context, addValidationError }) => {\n        // if user is the only user, do not allow delete\n        const userCount = await context.query.User.count({});\n\n        if (userCount == 1) {\n          return addValidationError(\"You cannot delete the only user\");\n        }\n\n        const userRole = context.session?.data?.role;\n\n        if (!userRole) {\n          return addValidationError(\"You are not allowed to delete this\");\n        }\n\n        if (checkRole(userRole, [PERMISSION_ENUM.DEV])) {\n          return;\n        }\n\n        // if existingItem is dev, do not allow delete\n        if (item.role === PERMISSION_ENUM.DEV) {\n          return addValidationError(\"You are not allowed to delete this\");\n        }\n      },\n      afterOperation: async ({ operation, context, item }) => {\n        if (operation === \"create\") {\n          if (!item.role) return;\n          const check = z.string().email().safeParse(item.email);\n\n          if (!check.success) {\n            return;\n          }\n\n          if (checkRole(item.role, [PERMISSION_ENUM.DEV])) {\n            return;\n          }\n\n          await resetPasswordForNewUser(\n            {\n              email: item.email,\n            },\n            context\n          );\n          console.log(`[System] Reset password for new user: ${item.email}`);\n        }\n      },\n    },\n  }),\n  UserLocalAuth: list({\n    fields: {\n      password: text(),\n      twoFaEmail: text(),\n      twoFaEmailSecret: text(),\n      twoFaEmailLastSent: timestamp(),\n      user: relationship({\n        ref: \"User.localAuth\",\n        many: false,\n      }),\n    },\n    access: denyAll,\n    graphql: {\n      omit: true,\n    },\n  }),\n};\n", "import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  DateTime: { input: any; output: any; }\n  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSON: { input: any; output: any; }\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: { input: any; output: any; }\n};\n\nexport type AuthenticatedItem = User;\n\nexport type ClientItemAuthenticationWithPasswordFailure = {\n  __typename?: 'ClientItemAuthenticationWithPasswordFailure';\n  message: Scalars['String']['output'];\n};\n\nexport type ClientItemAuthenticationWithPasswordResult = ClientItemAuthenticationWithPasswordFailure | ClientItemAuthenticationWithPasswordSuccess;\n\nexport type ClientItemAuthenticationWithPasswordSuccess = {\n  __typename?: 'ClientItemAuthenticationWithPasswordSuccess';\n  item: User;\n  sessionToken: Scalars['String']['output'];\n};\n\nexport type CreateInitialUserInput = {\n  adminPassword?: InputMaybe<Scalars['String']['input']>;\n  email?: InputMaybe<Scalars['String']['input']>;\n  name?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type DateTimeNullableFilter = {\n  equals?: InputMaybe<Scalars['DateTime']['input']>;\n  gt?: InputMaybe<Scalars['DateTime']['input']>;\n  gte?: InputMaybe<Scalars['DateTime']['input']>;\n  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;\n  lt?: InputMaybe<Scalars['DateTime']['input']>;\n  lte?: InputMaybe<Scalars['DateTime']['input']>;\n  not?: InputMaybe<DateTimeNullableFilter>;\n  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;\n};\n\nexport type IdFilter = {\n  equals?: InputMaybe<Scalars['ID']['input']>;\n  gt?: InputMaybe<Scalars['ID']['input']>;\n  gte?: InputMaybe<Scalars['ID']['input']>;\n  in?: InputMaybe<Array<Scalars['ID']['input']>>;\n  lt?: InputMaybe<Scalars['ID']['input']>;\n  lte?: InputMaybe<Scalars['ID']['input']>;\n  not?: InputMaybe<IdFilter>;\n  notIn?: InputMaybe<Array<Scalars['ID']['input']>>;\n};\n\nexport enum ImageExtension {\n  Gif = 'gif',\n  Jpg = 'jpg',\n  Png = 'png',\n  Webp = 'webp'\n}\n\nexport type ImageFieldInput = {\n  upload: Scalars['Upload']['input'];\n};\n\nexport type ImageFieldOutput = {\n  __typename?: 'ImageFieldOutput';\n  extension: ImageExtension;\n  filesize: Scalars['Int']['output'];\n  height: Scalars['Int']['output'];\n  id: Scalars['ID']['output'];\n  url: Scalars['String']['output'];\n  width: Scalars['Int']['output'];\n};\n\nexport type KeystoneAdminMeta = {\n  __typename?: 'KeystoneAdminMeta';\n  list?: Maybe<KeystoneAdminUiListMeta>;\n  lists: Array<KeystoneAdminUiListMeta>;\n};\n\n\nexport type KeystoneAdminMetaListArgs = {\n  key: Scalars['String']['input'];\n};\n\nexport type KeystoneAdminUiFieldGroupMeta = {\n  __typename?: 'KeystoneAdminUIFieldGroupMeta';\n  description?: Maybe<Scalars['String']['output']>;\n  fields: Array<KeystoneAdminUiFieldMeta>;\n  label: Scalars['String']['output'];\n};\n\nexport type KeystoneAdminUiFieldMeta = {\n  __typename?: 'KeystoneAdminUIFieldMeta';\n  createView: KeystoneAdminUiFieldMetaCreateView;\n  customViewsIndex?: Maybe<Scalars['Int']['output']>;\n  description?: Maybe<Scalars['String']['output']>;\n  fieldMeta?: Maybe<Scalars['JSON']['output']>;\n  isFilterable: Scalars['Boolean']['output'];\n  isNonNull?: Maybe<Array<KeystoneAdminUiFieldMetaIsNonNull>>;\n  isOrderable: Scalars['Boolean']['output'];\n  itemView?: Maybe<KeystoneAdminUiFieldMetaItemView>;\n  label: Scalars['String']['output'];\n  listView: KeystoneAdminUiFieldMetaListView;\n  path: Scalars['String']['output'];\n  search?: Maybe<QueryMode>;\n  viewsIndex: Scalars['Int']['output'];\n};\n\n\nexport type KeystoneAdminUiFieldMetaItemViewArgs = {\n  id?: InputMaybe<Scalars['ID']['input']>;\n};\n\nexport type KeystoneAdminUiFieldMetaCreateView = {\n  __typename?: 'KeystoneAdminUIFieldMetaCreateView';\n  fieldMode: KeystoneAdminUiFieldMetaCreateViewFieldMode;\n};\n\nexport enum KeystoneAdminUiFieldMetaCreateViewFieldMode {\n  Edit = 'edit',\n  Hidden = 'hidden'\n}\n\nexport enum KeystoneAdminUiFieldMetaIsNonNull {\n  Create = 'create',\n  Read = 'read',\n  Update = 'update'\n}\n\nexport type KeystoneAdminUiFieldMetaItemView = {\n  __typename?: 'KeystoneAdminUIFieldMetaItemView';\n  fieldMode?: Maybe<KeystoneAdminUiFieldMetaItemViewFieldMode>;\n  fieldPosition?: Maybe<KeystoneAdminUiFieldMetaItemViewFieldPosition>;\n};\n\nexport enum KeystoneAdminUiFieldMetaItemViewFieldMode {\n  Edit = 'edit',\n  Hidden = 'hidden',\n  Read = 'read'\n}\n\nexport enum KeystoneAdminUiFieldMetaItemViewFieldPosition {\n  Form = 'form',\n  Sidebar = 'sidebar'\n}\n\nexport type KeystoneAdminUiFieldMetaListView = {\n  __typename?: 'KeystoneAdminUIFieldMetaListView';\n  fieldMode: KeystoneAdminUiFieldMetaListViewFieldMode;\n};\n\nexport enum KeystoneAdminUiFieldMetaListViewFieldMode {\n  Hidden = 'hidden',\n  Read = 'read'\n}\n\nexport type KeystoneAdminUiListMeta = {\n  __typename?: 'KeystoneAdminUIListMeta';\n  description?: Maybe<Scalars['String']['output']>;\n  fields: Array<KeystoneAdminUiFieldMeta>;\n  groups: Array<KeystoneAdminUiFieldGroupMeta>;\n  hideCreate: Scalars['Boolean']['output'];\n  hideDelete: Scalars['Boolean']['output'];\n  initialColumns: Array<Scalars['String']['output']>;\n  initialSort?: Maybe<KeystoneAdminUiSort>;\n  isHidden: Scalars['Boolean']['output'];\n  isSingleton: Scalars['Boolean']['output'];\n  itemQueryName: Scalars['String']['output'];\n  key: Scalars['String']['output'];\n  label: Scalars['String']['output'];\n  labelField: Scalars['String']['output'];\n  listQueryName: Scalars['String']['output'];\n  pageSize: Scalars['Int']['output'];\n  path: Scalars['String']['output'];\n  plural: Scalars['String']['output'];\n  singular: Scalars['String']['output'];\n};\n\nexport type KeystoneAdminUiSort = {\n  __typename?: 'KeystoneAdminUISort';\n  direction: KeystoneAdminUiSortDirection;\n  field: Scalars['String']['output'];\n};\n\nexport enum KeystoneAdminUiSortDirection {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type KeystoneMeta = {\n  __typename?: 'KeystoneMeta';\n  adminMeta: KeystoneAdminMeta;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  authclient_changePassword?: Maybe<Scalars['Boolean']['output']>;\n  authclient_login?: Maybe<ClientItemAuthenticationWithPasswordResult>;\n  authclient_newAccountPasswordReset?: Maybe<Scalars['Boolean']['output']>;\n  authclient_requestPasswordReset?: Maybe<Scalars['Boolean']['output']>;\n  authclient_resetPassword?: Maybe<Scalars['Boolean']['output']>;\n  authenticateUserWithPassword?: Maybe<UserAuthenticationWithPasswordResult>;\n  createInitialUser: UserAuthenticationWithPasswordSuccess;\n  createUser?: Maybe<User>;\n  createUsers?: Maybe<Array<Maybe<User>>>;\n  deleteUser?: Maybe<User>;\n  deleteUsers?: Maybe<Array<Maybe<User>>>;\n  endSession: Scalars['Boolean']['output'];\n  test?: Maybe<Scalars['String']['output']>;\n  updateUser?: Maybe<User>;\n  updateUsers?: Maybe<Array<Maybe<User>>>;\n};\n\n\nexport type MutationAuthclient_ChangePasswordArgs = {\n  newPassword: Scalars['String']['input'];\n  oldPassword: Scalars['String']['input'];\n};\n\n\nexport type MutationAuthclient_LoginArgs = {\n  email: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n};\n\n\nexport type MutationAuthclient_NewAccountPasswordResetArgs = {\n  email: Scalars['String']['input'];\n};\n\n\nexport type MutationAuthclient_RequestPasswordResetArgs = {\n  email: Scalars['String']['input'];\n};\n\n\nexport type MutationAuthclient_ResetPasswordArgs = {\n  password: Scalars['String']['input'];\n  token: Scalars['String']['input'];\n};\n\n\nexport type MutationAuthenticateUserWithPasswordArgs = {\n  adminPassword: Scalars['String']['input'];\n  email: Scalars['String']['input'];\n};\n\n\nexport type MutationCreateInitialUserArgs = {\n  data: CreateInitialUserInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  data: UserCreateInput;\n};\n\n\nexport type MutationCreateUsersArgs = {\n  data: Array<UserCreateInput>;\n};\n\n\nexport type MutationDeleteUserArgs = {\n  where: UserWhereUniqueInput;\n};\n\n\nexport type MutationDeleteUsersArgs = {\n  where: Array<UserWhereUniqueInput>;\n};\n\n\nexport type MutationTestArgs = {\n  email?: InputMaybe<Scalars['String']['input']>;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  data: UserUpdateInput;\n  where: UserWhereUniqueInput;\n};\n\n\nexport type MutationUpdateUsersArgs = {\n  data: Array<UserUpdateArgs>;\n};\n\nexport type NestedStringFilter = {\n  contains?: InputMaybe<Scalars['String']['input']>;\n  endsWith?: InputMaybe<Scalars['String']['input']>;\n  equals?: InputMaybe<Scalars['String']['input']>;\n  gt?: InputMaybe<Scalars['String']['input']>;\n  gte?: InputMaybe<Scalars['String']['input']>;\n  in?: InputMaybe<Array<Scalars['String']['input']>>;\n  lt?: InputMaybe<Scalars['String']['input']>;\n  lte?: InputMaybe<Scalars['String']['input']>;\n  not?: InputMaybe<NestedStringFilter>;\n  notIn?: InputMaybe<Array<Scalars['String']['input']>>;\n  startsWith?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport enum OrderDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type PasswordFilter = {\n  isSet: Scalars['Boolean']['input'];\n};\n\nexport type PasswordState = {\n  __typename?: 'PasswordState';\n  isSet: Scalars['Boolean']['output'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  authenticatedItem?: Maybe<AuthenticatedItem>;\n  keystone: KeystoneMeta;\n  test?: Maybe<Scalars['String']['output']>;\n  user?: Maybe<User>;\n  users?: Maybe<Array<User>>;\n  usersCount?: Maybe<Scalars['Int']['output']>;\n};\n\n\nexport type QueryUserArgs = {\n  where: UserWhereUniqueInput;\n};\n\n\nexport type QueryUsersArgs = {\n  cursor?: InputMaybe<UserWhereUniqueInput>;\n  orderBy?: Array<UserOrderByInput>;\n  skip?: Scalars['Int']['input'];\n  take?: InputMaybe<Scalars['Int']['input']>;\n  where?: UserWhereInput;\n};\n\n\nexport type QueryUsersCountArgs = {\n  where?: UserWhereInput;\n};\n\nexport enum QueryMode {\n  Default = 'default',\n  Insensitive = 'insensitive'\n}\n\nexport type StringFilter = {\n  contains?: InputMaybe<Scalars['String']['input']>;\n  endsWith?: InputMaybe<Scalars['String']['input']>;\n  equals?: InputMaybe<Scalars['String']['input']>;\n  gt?: InputMaybe<Scalars['String']['input']>;\n  gte?: InputMaybe<Scalars['String']['input']>;\n  in?: InputMaybe<Array<Scalars['String']['input']>>;\n  lt?: InputMaybe<Scalars['String']['input']>;\n  lte?: InputMaybe<Scalars['String']['input']>;\n  mode?: InputMaybe<QueryMode>;\n  not?: InputMaybe<NestedStringFilter>;\n  notIn?: InputMaybe<Array<Scalars['String']['input']>>;\n  startsWith?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  adminPassword?: Maybe<PasswordState>;\n  avatar?: Maybe<ImageFieldOutput>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  displayName?: Maybe<Scalars['String']['output']>;\n  email?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  lastName?: Maybe<Scalars['String']['output']>;\n  name?: Maybe<Scalars['String']['output']>;\n  role?: Maybe<UserRoleType>;\n};\n\nexport type UserAuthenticationWithPasswordFailure = {\n  __typename?: 'UserAuthenticationWithPasswordFailure';\n  message: Scalars['String']['output'];\n};\n\nexport type UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordFailure | UserAuthenticationWithPasswordSuccess;\n\nexport type UserAuthenticationWithPasswordSuccess = {\n  __typename?: 'UserAuthenticationWithPasswordSuccess';\n  item: User;\n  sessionToken: Scalars['String']['output'];\n};\n\nexport type UserCreateInput = {\n  adminPassword?: InputMaybe<Scalars['String']['input']>;\n  avatar?: InputMaybe<ImageFieldInput>;\n  createdAt?: InputMaybe<Scalars['DateTime']['input']>;\n  email?: InputMaybe<Scalars['String']['input']>;\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  name?: InputMaybe<Scalars['String']['input']>;\n  role?: InputMaybe<UserRoleType>;\n};\n\nexport type UserLocalAuthWhereInput = {\n  AND?: InputMaybe<Array<UserLocalAuthWhereInput>>;\n  NOT?: InputMaybe<Array<UserLocalAuthWhereInput>>;\n  OR?: InputMaybe<Array<UserLocalAuthWhereInput>>;\n  id?: InputMaybe<IdFilter>;\n};\n\nexport type UserOrderByInput = {\n  createdAt?: InputMaybe<OrderDirection>;\n  email?: InputMaybe<OrderDirection>;\n  id?: InputMaybe<OrderDirection>;\n  lastName?: InputMaybe<OrderDirection>;\n  name?: InputMaybe<OrderDirection>;\n  role?: InputMaybe<OrderDirection>;\n};\n\nexport enum UserRoleType {\n  Admin = 'admin',\n  Dev = 'dev',\n  User = 'user'\n}\n\nexport type UserRoleTypeNullableFilter = {\n  equals?: InputMaybe<UserRoleType>;\n  in?: InputMaybe<Array<UserRoleType>>;\n  not?: InputMaybe<UserRoleTypeNullableFilter>;\n  notIn?: InputMaybe<Array<UserRoleType>>;\n};\n\nexport type UserUpdateArgs = {\n  data: UserUpdateInput;\n  where: UserWhereUniqueInput;\n};\n\nexport type UserUpdateInput = {\n  adminPassword?: InputMaybe<Scalars['String']['input']>;\n  avatar?: InputMaybe<ImageFieldInput>;\n  createdAt?: InputMaybe<Scalars['DateTime']['input']>;\n  email?: InputMaybe<Scalars['String']['input']>;\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  name?: InputMaybe<Scalars['String']['input']>;\n  role?: InputMaybe<UserRoleType>;\n};\n\nexport type UserWhereInput = {\n  AND?: InputMaybe<Array<UserWhereInput>>;\n  NOT?: InputMaybe<Array<UserWhereInput>>;\n  OR?: InputMaybe<Array<UserWhereInput>>;\n  adminPassword?: InputMaybe<PasswordFilter>;\n  createdAt?: InputMaybe<DateTimeNullableFilter>;\n  email?: InputMaybe<StringFilter>;\n  id?: InputMaybe<IdFilter>;\n  lastName?: InputMaybe<StringFilter>;\n  localAuth?: InputMaybe<UserLocalAuthWhereInput>;\n  name?: InputMaybe<StringFilter>;\n  role?: InputMaybe<UserRoleTypeNullableFilter>;\n};\n\nexport type UserWhereUniqueInput = {\n  email?: InputMaybe<Scalars['String']['input']>;\n  id?: InputMaybe<Scalars['ID']['input']>;\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', authenticateUserWithPassword?: { __typename: 'UserAuthenticationWithPasswordFailure' } | { __typename: 'UserAuthenticationWithPasswordSuccess', sessionToken: string } | null };\n\n\nexport const LoginDocument = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"Login\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"password\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"authenticateUserWithPassword\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"adminPassword\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"password\"}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UserAuthenticationWithPasswordSuccess\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"sessionToken\"}}]}}]}}]}}]} as unknown as DocumentNode<LoginMutation, LoginMutationVariables>;", "export const deepMerge = (objects: any[]) => {\n  const isObject = (obj: any) => obj && typeof obj === \"object\";\n  const combinedObject = objects.reduce((prev, obj) => {\n    Object.keys(obj).forEach((key) => {\n      const pVal = prev[key];\n      const oVal = obj[key];\n      if (Array.isArray(pVal) && Array.isArray(oVal)) {\n        prev[key] = pVal.concat(...oVal);\n      } else if (isObject(pVal) && isObject(oVal)) {\n        prev[key] = deepMerge([pVal, oVal]);\n      } else {\n        prev[key] = oVal;\n      }\n    });\n    return prev;\n  }, {});\n  return combinedObject;\n};\n\n// this would work like this:\n// const merged = deepMerge([{ a: 1, b: { c: 2 } }, { b: { d: 3 } }]);\n", "import { UserRoleType } from \"../../../graphql/operations\";\nimport { deepMerge } from \"../../../utils/functions/deepMerge\";\nimport { ItemArgs, OperationArgs } from \"./templates.type\";\n\nexport const accessConfig = <T, N = any, O = any>(generatorArgs: {\n  isAuthed?: boolean;\n  superAccess?: string[];\n  operations: {\n    all?: (context: OperationArgs) => boolean;\n    read?: (context: OperationArgs) => boolean;\n    write?: (context: OperationArgs) => boolean;\n    create?: (context: OperationArgs) => boolean;\n    update?: (context: OperationArgs) => boolean;\n    delete?: (context: OperationArgs) => boolean;\n  };\n  filter: {\n    all?: (context: OperationArgs) => boolean | Record<string, any>;\n    read?: (context: OperationArgs) => boolean | Record<string, any>;\n    write?: (context: OperationArgs) => boolean | Record<string, any>;\n    update?: (context: OperationArgs) => boolean | Record<string, any>;\n    delete?: (context: OperationArgs) => boolean | Record<string, any>;\n  };\n\n  item?: {\n    all?: (context: ItemArgs<N, O>) => boolean;\n    read?: (context: ItemArgs<N, O>) => boolean;\n    write?: (context: ItemArgs<N, O>) => boolean;\n    create?: (context: ItemArgs<N, O>) => boolean;\n    update?: (context: ItemArgs<N, O>) => boolean;\n    delete?: (context: ItemArgs<N, O>) => boolean;\n  };\n  extraConfig?: Partial<T>;\n}) => {\n  const globalMiddleware = (operation: OperationArgs) => {\n    if (generatorArgs.isAuthed) {\n      if (!operation.context.session?.itemId) {\n        throw new Error(\"Not Authenticated\");\n      }\n    }\n\n    const superAccessRoles = [\n      ...(generatorArgs.superAccess || []),\n      UserRoleType.Dev,\n    ];\n    // check for dev super user\n    if (superAccessRoles.includes(operation.session.data.role)) {\n      return true;\n    }\n\n    return false;\n  };\n  const baseConfig = <T>{\n    operation: {\n      query: (args: OperationArgs) => {\n        let checkerFunction =\n          generatorArgs.operations.read || generatorArgs.operations.all;\n        if (!checkerFunction) {\n          checkerFunction = () => true;\n        }\n        return globalMiddleware(args) || checkerFunction(args);\n      },\n      create: (args: OperationArgs) => {\n        let checkerFunction =\n          generatorArgs.operations.create ||\n          generatorArgs.operations.write ||\n          generatorArgs.operations.all;\n        if (!checkerFunction) {\n          checkerFunction = () => true;\n        }\n        return globalMiddleware(args) || checkerFunction(args);\n      },\n      update: (args: OperationArgs) => {\n        let checkerFunction =\n          generatorArgs.operations.update ||\n          generatorArgs.operations.write ||\n          generatorArgs.operations.all;\n        if (!checkerFunction) {\n          checkerFunction = () => true;\n        }\n        return globalMiddleware(args) || checkerFunction(args);\n      },\n      delete: (args: OperationArgs) => {\n        let checkerFunction =\n          generatorArgs.operations.delete ||\n          generatorArgs.operations.write ||\n          generatorArgs.operations.all;\n        if (!checkerFunction) {\n          checkerFunction = () => true;\n        }\n        return globalMiddleware(args) || checkerFunction(args);\n      },\n    },\n    filter: {\n      query: (args: OperationArgs) => {\n        let checkerFunction =\n          generatorArgs.filter.read || generatorArgs.operations.all;\n        if (!checkerFunction) {\n          checkerFunction = () => true;\n        }\n        return globalMiddleware(args) || checkerFunction(args);\n      },\n      update: (args: OperationArgs) => {\n        let checkerFunction =\n          generatorArgs.filter.update ||\n          generatorArgs.filter.write ||\n          generatorArgs.operations.all;\n        if (!checkerFunction) {\n          checkerFunction = () => true;\n        }\n        return globalMiddleware(args) || checkerFunction(args);\n      },\n      delete: (args: OperationArgs) => {\n        let checkerFunction =\n          generatorArgs.filter.delete ||\n          generatorArgs.filter.write ||\n          generatorArgs.operations.all;\n        if (!checkerFunction) {\n          checkerFunction = () => true;\n        }\n        return globalMiddleware(args) || checkerFunction(args);\n      },\n    },\n    ...(generatorArgs.item\n      ? {\n          item: {\n            create: (args: ItemArgs<N, O>) => {\n              let checkerFunction =\n                generatorArgs.item!.create ||\n                generatorArgs.item!.write ||\n                generatorArgs.operations.all;\n              if (!checkerFunction) {\n                checkerFunction = () => true;\n              }\n              return globalMiddleware(args) || checkerFunction(args);\n            },\n            update: (args: ItemArgs<N, O>) => {\n              let checkerFunction =\n                generatorArgs.item!.create ||\n                generatorArgs.item!.write ||\n                generatorArgs.operations.all;\n              if (!checkerFunction) {\n                checkerFunction = () => true;\n              }\n              return (\n                globalMiddleware(args) ||\n                checkerFunction(args) ||\n                generatorArgs.operations.all\n              );\n            },\n            delete: (args: ItemArgs<N, O>) => {\n              let checkerFunction =\n                generatorArgs.item!.create ||\n                generatorArgs.item!.write ||\n                generatorArgs.operations.all;\n              if (!checkerFunction) {\n                checkerFunction = () => true;\n              }\n              return globalMiddleware(args) || checkerFunction(args);\n            },\n          },\n        }\n      : {}),\n  };\n\n  return <T>(\n    deepMerge([baseConfig, (generatorArgs.extraConfig || {}) as Partial<T>])\n  );\n};\n", "import { z } from \"zod\";\nimport { ItemArgs, OperationArgs } from \"./templates.type\";\n\nexport const hasRole =\n  <N = any, O = any>(args: { roles: string[] }) =>\n  (operation: OperationArgs | ItemArgs<N, O>) => {\n    return args.roles.includes(operation.session?.data?.role);\n  };\n\nexport const isOwner =\n  <N = any, O = any>(args?: { itemIDKey?: string }) =>\n  (operation: ItemArgs<N, O>) => {\n    const userID = operation.session?.data?.id;\n\n    if (!userID) {\n      return false;\n    }\n\n    return {\n      [args?.itemIDKey || \"id\"]: {\n        equals: userID,\n      },\n    };\n  };\n\nexport const validateInput =\n  <N = any, O = any>(args: { validator: z.ZodObject<any> }) =>\n  (operation: ItemArgs<N, O>) => {\n    const validateResult = args.validator.safeParse(operation.inputData);\n\n    if (validateResult.success) {\n      return true;\n    }\n\n    return false;\n  };\n\nexport const sequential =\n  <N = any, O = any>(\n    checkers: ((operation: ItemArgs<N, O>) => boolean | Record<string, any>)[],\n  ) =>\n  (operation: ItemArgs<N, O>) => {\n    for (let checker of checkers) {\n      const check = checker(operation);\n      if (check) {\n        return check;\n      }\n    }\n    return false;\n  };\n\nexport const allow = () => true;\n\nexport const deny = () => false;\n\nexport const checkRole = (role: string, allowedRoles: string[]) => {\n  return allowedRoles.includes(role);\n};\n\nexport const memberhipCheckString = (\n  check: {\n    userId?: string;\n    permissionLevel?: number;\n    type: \"user\" | \"group\" | \"public\" | string;\n  },\n  args: {\n    tableKey: string;\n    userKey: string;\n    userIdKey: string;\n    accessKey: string;\n  },\n) => {\n  switch (check.type) {\n    case \"user\": {\n      return {\n        [args.tableKey]: {\n          some: {\n            [args.userKey]: {\n              [args.userIdKey]: {\n                equals: check.userId,\n              },\n            },\n            [args.accessKey]: {\n              gte: check.permissionLevel,\n            },\n          },\n        },\n      };\n    }\n    case \"public\": {\n      return {\n        members: {\n          some: {\n            isPublic: {\n              equals: true,\n            },\n            access: {\n              gte: check.permissionLevel,\n            },\n          },\n        },\n      };\n    }\n  }\n};\n", "import type { Lists } from \".keystone/types\";\nimport { userDataList } from \"./schema/UserData\";\n\nexport const lists: Lists = {\n  ...userDataList,\n};\n", "import {\n  OpenAPIRegistry,\n  OpenApiGeneratorV3,\n} from \"@asteasolutions/zod-to-openapi\";\nimport { Express, Router, json } from \"express\";\nimport swaggerUi from \"swagger-ui-express\";\nimport { GlobalContext } from \"../common/types\";\nimport { routeList } from \"./api\";\nimport { RequestInputType, RouteDeclarationList } from \"./declarations\";\nimport { devErrorHandler } from \"./services/middleware/errorHandler\";\n\nconst registry = new OpenAPIRegistry();\n\nconst MAIN_API_ROUTE = \"/api\";\n\n// create a function to convert :var to {var}\nfunction convertExpressRouteToOpenApiRoute(route: string) {\n  return route.replace(/:(\\w+)/g, \"{$1}\");\n}\n\nfunction implementRouteDeclaration(\n  mainRouter: Router,\n  commonContext: GlobalContext,\n  data: RouteDeclarationList\n) {\n  const router = Router();\n\n  for (const [route, routeData] of data.routes) {\n    const method = routeData.method;\n\n    registry.registerPath({\n      method: method as any,\n      path: convertExpressRouteToOpenApiRoute(\n        MAIN_API_ROUTE + data.name + route\n      ),\n      tags: [data.name],\n      security: routeData.accessConfig ? [{ bearerAuth: [] }] : undefined,\n      request: {\n        query: routeData.inputParser.pick({\n          [RequestInputType.QUERY]: true,\n        }).shape?.query,\n        params: routeData.inputParser.pick({\n          [RequestInputType.PARAMS]: true,\n        }).shape?.params,\n        headers: routeData.inputParser.pick({\n          [RequestInputType.HEADERS]: true,\n        }).shape?.headers,\n        body: [\"get\"].includes(method)\n          ? undefined\n          : {\n              content: {\n                \"application/json\": {\n                  schema: routeData.inputParser.pick({\n                    [RequestInputType.BODY]: true,\n                  }).shape?.body,\n                },\n              },\n            },\n      },\n      responses: {\n        200: {\n          description: \"Successful response\",\n          content: {\n            \"application/json\": {\n              schema: routeData.outputParser ? routeData.outputParser : {},\n            },\n          },\n        },\n      },\n    });\n\n    router[method](route, async (req, res, next) => {\n      const context = await commonContext.withRequest(req, res);\n      const parsedData = routeData.inputParser.safeParse({\n        [RequestInputType.QUERY]: req.query,\n        [RequestInputType.BODY]: req.body,\n        [RequestInputType.PARAMS]: req.params,\n        [RequestInputType.HEADERS]: req.headers,\n      });\n      if (!parsedData.success)\n        return res.status(400).json({ error: parsedData.error });\n\n      const session = context.session;\n\n      if (routeData.accessConfig) {\n        const accessResult = routeData.accessConfig({\n          context,\n          session,\n          operation: method,\n        });\n\n        if (!accessResult) return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      try {\n        const returnValue = await routeData.function({\n          context,\n          inputData: parsedData.data,\n          req,\n          res,\n        });\n\n        if (returnValue) {\n          if (routeData.outputParser) {\n            const outputData = routeData.outputParser.safeParse(returnValue);\n            if (!outputData.success)\n              return res.status(500).json({ error: outputData.error });\n            return res.json(outputData.data);\n          } else {\n            return res.json(returnValue);\n          }\n        }\n      } catch (error) {\n        next(error);\n      }\n    });\n  }\n\n  mainRouter.use(data.name, router);\n}\n\nexport default function bootstrapExpress(\n  app: Express,\n  commonContext: GlobalContext\n) {\n  app.use(json());\n  app.use(devErrorHandler);\n  const mainRouter = Router();\n\n  for (const routeData of routeList) {\n    implementRouteDeclaration(mainRouter, commonContext, routeData);\n  }\n\n  const definitions = registry.definitions;\n  const generator = new OpenApiGeneratorV3(definitions);\n  const document = generator.generateDocument({\n    info: {\n      title: \"Server API\",\n      version: \"1.0.0\",\n    },\n    openapi: \"3.0.0\",\n    // add bearerAuth security definition\n  });\n  // @ts-ignore\n  document.components[\"securitySchemes\"] = {\n    bearerAuth: {\n      type: \"http\",\n      in: \"header\",\n      name: \"Authorization\",\n      description: \"Bearer token to access these api endpoints\",\n      scheme: \"bearer\",\n      bearerFormat: \"JWT\",\n    },\n  };\n\n  app.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(document));\n  app.use(MAIN_API_ROUTE, mainRouter);\n}\n", "import { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\r\nimport { z } from \"zod\";\r\nimport { authRouteDeclaration } from \"./auth\";\r\nextendZodWithOpenApi(z);\r\n\r\nexport const routeList = [authRouteDeclaration];\r\n", "import { ImageExtension } from \"@keystone-6/core/types\";\nimport { z } from \"zod\";\nimport { PERMISSION_ENUM } from \"../../../common/roles\";\nimport { LoginDocument } from \"../../../graphql/operations\";\nimport { s3ImageConfigKey } from \"../../../imageConfig\";\nimport {\n  NO_INPUT,\n  RequestInputType,\n  RouteDeclarationList,\n  RouteDeclarationMetadata,\n  RouteMethod,\n} from \"../../declarations\";\nimport {\n  hasRole,\n  serverAccessConfig,\n} from \"../../services/access/serverAccessConfig\";\n\nconst authRouteDeclaration: RouteDeclarationList = {\n  name: \"/auth\",\n  routes: new Map(),\n};\n\nauthRouteDeclaration.routes.set(\n  \"/signin\",\n  new RouteDeclarationMetadata({\n    method: RouteMethod.POST,\n    inputParser: z.object({\n      [RequestInputType.BODY]: z.object({\n        username: z.string(),\n        password: z.string(),\n      }),\n    }),\n\n    func: async ({\n      context: { graphql },\n      inputData: {\n        [RequestInputType.BODY]: { username, password },\n      },\n      res,\n    }) => {\n      const request = await graphql.run({\n        query: LoginDocument,\n        variables: {\n          email: username as string,\n          password: password as string,\n        },\n      });\n\n      if (\n        request.authenticateUserWithPassword?.__typename ==\n        \"UserAuthenticationWithPasswordSuccess\"\n      ) {\n        return {\n          token: request.authenticateUserWithPassword.sessionToken,\n        };\n      } else {\n        res.status(401).json({\n          error: \"Invalid credentials\",\n        });\n        return;\n      }\n    },\n  })\n);\n\nauthRouteDeclaration.routes.set(\n  \"/test/:id/:id2\",\n  new RouteDeclarationMetadata({\n    method: RouteMethod.GET,\n    accessConfig: serverAccessConfig({\n      conditions: [hasRole({ roles: [PERMISSION_ENUM.ADMIN] })],\n    }),\n    inputParser: z.object({\n      [RequestInputType.PARAMS]: z.object({\n        id: z.preprocess((val: any) => parseInt(val), z.number()),\n        id2: z.preprocess((val: any) => parseInt(val), z.number()),\n      }),\n      [RequestInputType.QUERY]: z.object({\n        name: z.string(),\n      }),\n      [RequestInputType.HEADERS]: z.object({\n        whoosh: z.string().default(\"whoosh\"),\n      }),\n    }),\n\n    func: async ({ inputData, res }) => {\n      return inputData;\n    },\n  })\n);\n\nauthRouteDeclaration.routes.set(\n  \"/profile_picture\",\n  new RouteDeclarationMetadata({\n    method: RouteMethod.GET,\n    accessConfig: serverAccessConfig({}),\n    inputParser: NO_INPUT,\n    func: async ({ context: { session, prisma, images }, res }) => {\n      const user = await prisma.user.findUnique({\n        where: {\n          id: session?.data?.id,\n        },\n      });\n\n      if (!user) {\n        return res.status(404).json({\n          error: \"User not found\",\n        });\n      }\n\n      if (!user.avatar_id || !user.avatar_extension) {\n        return res.status(404).json({\n          error: \"Profile picture not found\",\n        });\n      }\n\n      const image = await images(s3ImageConfigKey).getUrl(\n        user.avatar_id,\n        user.avatar_extension as ImageExtension\n      );\n\n      return {\n        session,\n        image: image,\n      };\n    },\n  })\n);\n\nexport { authRouteDeclaration };\n", "import { KeystoneContext } from \"@keystone-6/core/types\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport { AuthedSession, GlobalContext, GlobalTypeInfo } from \"../common/types\";\n\nimport { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\nimport { ServerAccessFunction } from \"./services/access/serverAccessConfig\";\n\nextendZodWithOpenApi(z);\n\nexport type RouteDeclaration<T = any> = (props: {\n  context: KeystoneContext<GlobalTypeInfo>;\n  inputData: T;\n  req: Request;\n  res: Response;\n}) => Promise<any> | any;\n\nexport enum RouteMethod {\n  GET = \"get\",\n  POST = \"post\",\n  PUT = \"put\",\n  DELETE = \"delete\",\n  USE = \"use\",\n}\n\nexport enum RequestInputType {\n  QUERY = \"query\",\n  BODY = \"body\",\n  PARAMS = \"params\",\n  HEADERS = \"headers\",\n}\n\nexport type ServerOperationArgs = {\n  context: GlobalContext;\n  session?: AuthedSession;\n  operation: RouteMethod;\n};\n\nexport const NO_INPUT = z.object({});\n\nexport class RouteDeclarationMetadata<T = any, U = any> {\n  method: RouteMethod;\n  inputParser: T;\n  outputParser?: U;\n  accessConfig?: ServerAccessFunction;\n  // @ts-expect-error T does not satisfy the constraint 'z.ZodType<any>'.\n  function: RouteDeclaration<z.infer<T>>;\n\n  constructor(args: {\n    method: RouteMethod;\n    accessConfig?: ServerAccessFunction;\n    inputParser: T;\n    outputParser?: U;\n    // @ts-expect-error T does not satisfy the constraint 'z.ZodType<any>'.\n    func: RouteDeclaration<z.infer<T>>;\n  }) {\n    this.method = args.method;\n    this.function = args.func;\n    this.inputParser = args.inputParser;\n    this.accessConfig = args.accessConfig;\n    this.outputParser = args.outputParser;\n  }\n}\n\nexport type RouteDeclarationList = {\n  name: string;\n  routes: Map<string, RouteDeclarationMetadata>;\n};\n", "import { UserRoleType } from \"../../../graphql/operations\";\r\nimport { ServerOperationArgs } from \"../../declarations\";\r\n\r\nexport type ServerAccessFunction = (operation: ServerOperationArgs) => boolean;\r\n\r\nexport type ServerAccessConfigBuilder = (generatorArgs: {\r\n  superAccess?: string[];\r\n  conditions?: ((operation: ServerOperationArgs) => boolean)[];\r\n}) => ServerAccessFunction;\r\n\r\nexport const serverAccessConfig: ServerAccessConfigBuilder = (\r\n  generatorArgs\r\n) => {\r\n  const globalMiddleware = (operation: ServerOperationArgs) => {\r\n    if (!operation.session) {\r\n      throw new Error(\"Not Authenticated\");\r\n    }\r\n\r\n    if (!operation.context.session?.itemId) {\r\n      throw new Error(\"Not Authenticated\");\r\n    }\r\n\r\n    const superAccessRoles = [\r\n      ...(generatorArgs.superAccess || []),\r\n      UserRoleType.Dev,\r\n    ];\r\n    // check for dev super user\r\n    if (superAccessRoles.includes(operation.session.data.role)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  return (operation) => {\r\n    let isAllowed = false;\r\n\r\n    // global middleware is to take precedence\r\n    isAllowed = isAllowed || globalMiddleware(operation);\r\n\r\n    for (const condition of generatorArgs.conditions || []) {\r\n      if (isAllowed) {\r\n        isAllowed = isAllowed || condition(operation);\r\n      }\r\n\r\n      if (!isAllowed) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isAllowed;\r\n  };\r\n};\r\n\r\nexport const hasRole =\r\n  (args: { roles: string[] }) => (operation: ServerOperationArgs) => {\r\n    console.log(operation.session?.data?.role);\r\n    return args.roles.includes(operation.session?.data?.role ?? \"xxnorolexx\");\r\n  };\r\n\r\nexport const isOwner =\r\n  (args?: { itemIDKey?: string }) => (operation: ServerOperationArgs) => {\r\n    const userID = operation.session?.data?.id;\r\n\r\n    if (!userID) {\r\n      return false;\r\n    }\r\n\r\n    return {\r\n      [args?.itemIDKey || \"id\"]: {\r\n        equals: userID,\r\n      },\r\n    };\r\n  };\r\n", "import { KeystoneContext } from \"@keystone-6/core/types\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { GlobalTypeInfo } from \"../../../common/types\";\n\n/**\n * Handler to catch `async` operation errors.\n * Reduces having to write `try-catch` all the time.\n */\nexport const catchErrors =\n  (action: Function, context: KeystoneContext<GlobalTypeInfo>) =>\n  (req: Request, res: Response, next: NextFunction) =>\n    action(req, res, context).catch(next);\n\n/**\n * Show useful information to client in development.\n */\n\nexport const devErrorHandler = (\n  err: any,\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => {\n  err.stack = err.stack || \"\";\n  const status = err.status || 500;\n  const error = { message: err.message };\n  res.status(status);\n  return res.json({ status, error });\n};\n"],
  "mappings": "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",
  "names": ["import_zod_to_openapi", "import_core", "import_zod", "import_bcrypt", "jwt", "resetPassword", "config", "hashedPassword", "password", "import_core", "import_core", "import_zod_to_openapi", "import_zod_to_openapi", "import_zod", "import_zod", "import_zod", "hasRole", "graphql", "password", "hasRole", "session", "image", "session", "swaggerUi"]
}
